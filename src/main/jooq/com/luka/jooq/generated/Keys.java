/*
 * This file is generated by jOOQ.
 */
package com.luka.jooq.generated;


import com.luka.jooq.generated.tables.Bets;
import com.luka.jooq.generated.tables.Games;
import com.luka.jooq.generated.tables.Users;
import com.luka.jooq.generated.tables.records.BetsRecord;
import com.luka.jooq.generated.tables.records.GamesRecord;
import com.luka.jooq.generated.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BetsRecord> BETS_PKEY = Internal.createUniqueKey(Bets.BETS, DSL.name("bets_pkey"), new TableField[] { Bets.BETS.ID }, true);
    public static final UniqueKey<GamesRecord> GAMES_PKEY = Internal.createUniqueKey(Games.GAMES, DSL.name("games_pkey"), new TableField[] { Games.GAMES.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_USERNAME_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_username_key"), new TableField[] { Users.USERS.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BetsRecord, GamesRecord> BETS__BETS_GAME_ID_FKEY = Internal.createForeignKey(Bets.BETS, DSL.name("bets_game_id_fkey"), new TableField[] { Bets.BETS.GAME_ID }, Keys.GAMES_PKEY, new TableField[] { Games.GAMES.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<BetsRecord, UsersRecord> BETS__BETS_USER_ID_FKEY = Internal.createForeignKey(Bets.BETS, DSL.name("bets_user_id_fkey"), new TableField[] { Bets.BETS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<GamesRecord, UsersRecord> GAMES__GAME_USER_FK1 = Internal.createForeignKey(Games.GAMES, DSL.name("game_user_fk1"), new TableField[] { Games.GAMES.PLAYER1_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<GamesRecord, UsersRecord> GAMES__GAME_USER_FK2 = Internal.createForeignKey(Games.GAMES, DSL.name("game_user_fk2"), new TableField[] { Games.GAMES.PLAYER2_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<GamesRecord, UsersRecord> GAMES__GAME_USER_FK3 = Internal.createForeignKey(Games.GAMES, DSL.name("game_user_fk3"), new TableField[] { Games.GAMES.WINNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
}
