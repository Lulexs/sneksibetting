/*
 * This file is generated by jOOQ.
 */
package com.luka.jooq.generated.tables;


import com.luka.jooq.generated.Keys;
import com.luka.jooq.generated.Public;
import com.luka.jooq.generated.tables.Games.GamesPath;
import com.luka.jooq.generated.tables.Users.UsersPath;
import com.luka.jooq.generated.tables.records.BetsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Bets extends TableImpl<BetsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bets</code>
     */
    public static final Bets BETS = new Bets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BetsRecord> getRecordType() {
        return BetsRecord.class;
    }

    /**
     * The column <code>public.bets.id</code>.
     */
    public final TableField<BetsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.bets.user_id</code>.
     */
    public final TableField<BetsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.bets.game_id</code>.
     */
    public final TableField<BetsRecord, UUID> GAME_ID = createField(DSL.name("game_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.bets.bet</code>.
     */
    public final TableField<BetsRecord, String> BET = createField(DSL.name("bet"), SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>public.bets.odds</code>.
     */
    public final TableField<BetsRecord, BigDecimal> ODDS = createField(DSL.name("odds"), SQLDataType.NUMERIC(10, 6), this, "");

    /**
     * The column <code>public.bets.stake</code>.
     */
    public final TableField<BetsRecord, BigDecimal> STAKE = createField(DSL.name("stake"), SQLDataType.NUMERIC(10, 6), this, "");

    /**
     * The column <code>public.bets.winnings</code>.
     */
    public final TableField<BetsRecord, BigDecimal> WINNINGS = createField(DSL.name("winnings"), SQLDataType.NUMERIC(10, 6), this, "");

    /**
     * The column <code>public.bets.status</code>.
     */
    public final TableField<BetsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(4), this, "");

    private Bets(Name alias, Table<BetsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Bets(Name alias, Table<BetsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.bets</code> table reference
     */
    public Bets(String alias) {
        this(DSL.name(alias), BETS);
    }

    /**
     * Create an aliased <code>public.bets</code> table reference
     */
    public Bets(Name alias) {
        this(alias, BETS);
    }

    /**
     * Create a <code>public.bets</code> table reference
     */
    public Bets() {
        this(DSL.name("bets"), null);
    }

    public <O extends Record> Bets(Table<O> path, ForeignKey<O, BetsRecord> childPath, InverseForeignKey<O, BetsRecord> parentPath) {
        super(path, childPath, parentPath, BETS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BetsPath extends Bets implements Path<BetsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BetsPath(Table<O> path, ForeignKey<O, BetsRecord> childPath, InverseForeignKey<O, BetsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BetsPath(Name alias, Table<BetsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BetsPath as(String alias) {
            return new BetsPath(DSL.name(alias), this);
        }

        @Override
        public BetsPath as(Name alias) {
            return new BetsPath(alias, this);
        }

        @Override
        public BetsPath as(Table<?> alias) {
            return new BetsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BetsRecord> getPrimaryKey() {
        return Keys.BETS_PKEY;
    }

    @Override
    public List<ForeignKey<BetsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BETS__BETS_GAME_ID_FKEY, Keys.BETS__BETS_USER_ID_FKEY);
    }

    private transient GamesPath _games;

    /**
     * Get the implicit join path to the <code>public.games</code> table.
     */
    public GamesPath games() {
        if (_games == null)
            _games = new GamesPath(this, Keys.BETS__BETS_GAME_ID_FKEY, null);

        return _games;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.BETS__BETS_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public List<Check<BetsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("bets_bet_check"), "((bet = ANY (ARRAY['1'::bpchar, 'X'::bpchar, '2'::bpchar])))", true),
            Internal.createCheck(this, DSL.name("bets_status_check"), "(((status)::text = ANY ((ARRAY['live'::character varying, 'won'::character varying, 'lost'::character varying])::text[])))", true)
        );
    }

    @Override
    public Bets as(String alias) {
        return new Bets(DSL.name(alias), this);
    }

    @Override
    public Bets as(Name alias) {
        return new Bets(alias, this);
    }

    @Override
    public Bets as(Table<?> alias) {
        return new Bets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bets rename(String name) {
        return new Bets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bets rename(Name name) {
        return new Bets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bets rename(Table<?> name) {
        return new Bets(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bets where(Condition condition) {
        return new Bets(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bets where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bets where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bets where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bets where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bets where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bets where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bets where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bets whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bets whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
