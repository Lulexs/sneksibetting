/*
 * This file is generated by jOOQ.
 */
package com.luka.jooq.generated.tables;


import com.luka.jooq.generated.Keys;
import com.luka.jooq.generated.Public;
import com.luka.jooq.generated.tables.Bets.BetsPath;
import com.luka.jooq.generated.tables.Users.UsersPath;
import com.luka.jooq.generated.tables.records.GamesRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Games extends TableImpl<GamesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.games</code>
     */
    public static final Games GAMES = new Games();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GamesRecord> getRecordType() {
        return GamesRecord.class;
    }

    /**
     * The column <code>public.games.id</code>.
     */
    public final TableField<GamesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.games.player1_id</code>.
     */
    public final TableField<GamesRecord, UUID> PLAYER1_ID = createField(DSL.name("player1_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.games.player2_id</code>.
     */
    public final TableField<GamesRecord, UUID> PLAYER2_ID = createField(DSL.name("player2_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.games.player1_elo</code>.
     */
    public final TableField<GamesRecord, BigDecimal> PLAYER1_ELO = createField(DSL.name("player1_elo"), SQLDataType.NUMERIC(10, 6), this, "");

    /**
     * The column <code>public.games.player2_elo</code>.
     */
    public final TableField<GamesRecord, BigDecimal> PLAYER2_ELO = createField(DSL.name("player2_elo"), SQLDataType.NUMERIC(10, 6), this, "");

    /**
     * The column <code>public.games.winner_id</code>.
     */
    public final TableField<GamesRecord, UUID> WINNER_ID = createField(DSL.name("winner_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.games.player1_score</code>.
     */
    public final TableField<GamesRecord, Integer> PLAYER1_SCORE = createField(DSL.name("player1_score"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.games.player2_score</code>.
     */
    public final TableField<GamesRecord, Integer> PLAYER2_SCORE = createField(DSL.name("player2_score"), SQLDataType.INTEGER.nullable(false), this, "");

    private Games(Name alias, Table<GamesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Games(Name alias, Table<GamesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.games</code> table reference
     */
    public Games(String alias) {
        this(DSL.name(alias), GAMES);
    }

    /**
     * Create an aliased <code>public.games</code> table reference
     */
    public Games(Name alias) {
        this(alias, GAMES);
    }

    /**
     * Create a <code>public.games</code> table reference
     */
    public Games() {
        this(DSL.name("games"), null);
    }

    public <O extends Record> Games(Table<O> path, ForeignKey<O, GamesRecord> childPath, InverseForeignKey<O, GamesRecord> parentPath) {
        super(path, childPath, parentPath, GAMES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GamesPath extends Games implements Path<GamesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GamesPath(Table<O> path, ForeignKey<O, GamesRecord> childPath, InverseForeignKey<O, GamesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GamesPath(Name alias, Table<GamesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GamesPath as(String alias) {
            return new GamesPath(DSL.name(alias), this);
        }

        @Override
        public GamesPath as(Name alias) {
            return new GamesPath(alias, this);
        }

        @Override
        public GamesPath as(Table<?> alias) {
            return new GamesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<GamesRecord> getPrimaryKey() {
        return Keys.GAMES_PKEY;
    }

    @Override
    public List<ForeignKey<GamesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GAMES__GAME_USER_FK1, Keys.GAMES__GAME_USER_FK2, Keys.GAMES__GAME_USER_FK3);
    }

    private transient UsersPath _gameUserFk1;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>game_user_fk1</code> key.
     */
    public UsersPath gameUserFk1() {
        if (_gameUserFk1 == null)
            _gameUserFk1 = new UsersPath(this, Keys.GAMES__GAME_USER_FK1, null);

        return _gameUserFk1;
    }

    private transient UsersPath _gameUserFk2;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>game_user_fk2</code> key.
     */
    public UsersPath gameUserFk2() {
        if (_gameUserFk2 == null)
            _gameUserFk2 = new UsersPath(this, Keys.GAMES__GAME_USER_FK2, null);

        return _gameUserFk2;
    }

    private transient UsersPath _gameUserFk3;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>game_user_fk3</code> key.
     */
    public UsersPath gameUserFk3() {
        if (_gameUserFk3 == null)
            _gameUserFk3 = new UsersPath(this, Keys.GAMES__GAME_USER_FK3, null);

        return _gameUserFk3;
    }

    private transient BetsPath _bets;

    /**
     * Get the implicit to-many join path to the <code>public.bets</code> table
     */
    public BetsPath bets() {
        if (_bets == null)
            _bets = new BetsPath(this, null, Keys.BETS__BETS_GAME_ID_FKEY.getInverseKey());

        return _bets;
    }

    @Override
    public Games as(String alias) {
        return new Games(DSL.name(alias), this);
    }

    @Override
    public Games as(Name alias) {
        return new Games(alias, this);
    }

    @Override
    public Games as(Table<?> alias) {
        return new Games(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Games rename(String name) {
        return new Games(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Games rename(Name name) {
        return new Games(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Games rename(Table<?> name) {
        return new Games(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Games where(Condition condition) {
        return new Games(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Games where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Games where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Games where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Games where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Games where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Games where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Games where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Games whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Games whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
